##### 1. Task for “Configuring JBoss Web Server component”

### 1.1. Change HTTP connector to listen on port 9090
### 1.2. Configure AJP connector to listen on localhost and port 9091

vi ~/custom/deploy/jbossweb.sar/server.xml
### Change ports and AJP address to:
# server.xml
<!-- A HTTP/1.1 Connector on port 8080 -->
<Connector protocol="HTTP/1.1" port="9090"
<!-- A AJP 1.3 Connector on port 8009 --> 
<Connector protocol="AJP/1.3" port="9091" address="localhost"
# /server.xml


### 1.3. Change context path for sample application to /changed-context

vi ~/custom/deploy/hsr-test.war/WEB-INF/jboss-web.xml
# jboss-web.xml
<jboss-web>
		<context-root>/changed-context</context-root>
</jboss-web>
# /jboss-web.xml


### 1.4. Remove application bound to root context

### comment context-root
vi ~/custom/deploy/hsr-test.war/WEB-INF/jboss-web.xml
# jboss-web.xml
<!--
	<context-root>/changed-context</context-root>
-->
# /jboss-web.xml

### Test and uncomment then.


### 1.5. Configure access logging for HTTP requests using valves
vi ~/custom/deploy/jbossweb.sar/server.xml
### uncomment under <!-- Uncomment to enable request dumper ... -->
# server.xml
   <Valve className="org.apache.catalina.valves.RequestDumperValve" />
            <!-- Access logger -->
    <Valve className="org.apache.catalina.valves.AccessLogValve"
            prefix="localhost_access_log." suffix=".log"
            pattern="common" directory="${jboss.server.log.dir}"
            resolveHosts="false" /> 
# /server.xml

tail custom/log/localhost_access_log.2017-02-07.log


#### 1.6. Configure Apache HTTP server listen on port 8080 forwarding all requests to AJP connector on localhost:9091

### install mod_jk.so !DO NOT DO LIKE THIS ON ENTERPRISE (don't install jdk)!
yum -y install httpd perl perl-CGI autoconf libtool gcc pcre-devel
wget http://ftp.byfly.by/pub/apache.org/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.42-src.tar.gz
tar xf tomcat-connectors-1.2.42-src.tar.gz
cd tomcat-connectors-1.2.42-src/native
./buildconf.sh 
./configure --with-apxs=/usr/bin/apxs
make
#cp ./apache-2.0/mod_jk.so /apps/apache/modules/
#cp ./apache-2.0/mod_jk.so /usr/lib/httpd/modules/
#cp ./apache-2.0/mod_jk.so /usr/lib64/httpd/modules/
cp ./apache-2.0/mod_jk.so /etc/httpd/modules/



### httpd.conf add
# httpd.conf
Listen 8080

Include conf.d/*.conf
Include conf.modules.d/*.conf
# /httpd.conf


vi /etc/httpd/conf.d/mod_jk.conf

# mod_jk.conf
LoadModule jk_module  /etc/httpd/modules/mod_jk.so

JkWorkersFile /etc/httpd/conf/worker.properties
JkLogFile /var/log/httpd/mod_jk.log
JkLogLevel info
JkLogStampFormat "[%a %b %d %H:%M:%S %Y] "
JkOptions +ForwardKeySize +ForwardURICompat -ForwardDirectories
JkRequestLogFormat "%w %V %T"
JkMount /* jbossA
# /mod_jk.conf


vi /etc/httpd/conf/worker.properties

# worker.properties
worker.list=jbossA

worker.jbossA.port=9091
worker.jbossA.host=localhost
worker.jbossA.type=ajp13
worker.jbossA.lbfactor=1
# /worker.properties



##### 3.1. Configure JBoss HTTP connector to handle HTTPS traffic and using HTTP basic authentication

mkdir custom/conf/cert
### http://www.xinotes.net/notes/note/880/
#! Step 1
vi ~/custom/conf/login-config.xml
### add
# login-config.xml
<application-policy name="myapp">
    <authentication>
	<login-module code="org.jboss.security.auth.spi.UsersRolesLoginModule" flag="required">
	    <module-option name="usersProperties">props/myapp-users.properties</module-option>
	    <module-option name="rolesProperties">props/myapp-roles.properties</module-option>
	</login-module>
    </authentication>
</application-policy>
# /login-config.xml


cp ~/custom/conf/props/jmx-console-roles.properties ~/custom/conf/props/myapp-roles.properties
cp ~/custom/conf/props/jmx-console-users.properties ~/custom/conf/props/myapp-users.properties

#! Step 2  Create users properties
vi ~/custom/conf/props/myapp-users.properties
### add
# myapp-users.properties
sun=sun
# /myapp-users.properties

#! Step 3 Create roles properties
vi ~/custom/conf/props/myapp-roles.properties
### add
# myapp-roles.properties
sun=testUserRole  
# /myapp-roles.properties

#! Step 4 Edit web.xml in the application myapp. Add security constraints
vi ~/custom/deploy/hsr-test.war/WEB-INF/web.xml
### add
# web.xml
<security-constraint>
	<web-resource-collection>
	<web-resource-name>All resources</web-resource-name>
	<description>Protects all resources</description>
	<url-pattern>/*</url-pattern>
	</web-resource-collection>

	<auth-constraint>
	<role-name>testUserRole</role-name>
    </auth-constraint>
</security-constraint>
   
<login-config>
    <auth-method>BASIC</auth-method>
    <realm-name>Test Realm</realm-name>
</login-config>

<security-role>
    <role-name>testUserRole</role-name>
</security-role>
# /web.xml

#! Step 5 Edit WEB-INF/jboss-web.xml, add the following contents
vi ~/custom/deploy/hsr-test.war/WEB-INF/jboss-web.xml
### add <security-domain>java:/jaas/myapp</security-domain> in <jboss-web> section
# jboss-web.xml
<jboss-web>
  <security-domain>java:/jaas/myapp</security-domain>
</jboss-web>
# /jboss-web.xml
# where myapp corresponds to the name attribute for application-policy in step 1. 

#! Step 6 Generate certificates
/opt/oracle/jdk/current/bin/keytool -genkey -keyalg RSA

mv .keystore custom/conf/cert/

#! Step 7 Add ssl/tls connector
vi ~/custom/deploy/jbossweb.sar/server.xml
### add section
# server.xml 
<!-- SSL/TLS Connector configuration using the admin devl guide keystore -->
<Connector protocol="HTTP/1.1" SSLEnabled="true"
port="8443" address="${jboss.bind.address}"
scheme="https" secure="true" clientAuth="false"
keystoreFile="${jboss.server.home.dir}/conf/cert/.keystore"
keystorePass="123456" sslProtocol = "TLS" />
# /server.xml



##### 3.2. Add client certificate to authentication strategy

#! Step 1 Create a certificate for your server 
/opt/oracle/jdk/current/bin/keytool -genkey -keyalg RSA -keystore server.keystore -storepass 123456 -validity 365

#! Step 2 Create the client certificate, which is used to authenticate against the server when accessing a resource through SSL.
# yum install -y java #jdk generates too long..., so install open java
/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.121-0.b13.el7_3.x86_64/jre/bin/keytool -genkey -keystore client.keystore -validity 365 -keyalg RSA -keysize 2048 -storetype pkcs12

#! Step 3 Export the client certificate and create a truststore by importing this certificate:
/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.121-0.b13.el7_3.x86_64/jre/bin/keytool -exportcert -keystore client.keystore  -storetype pkcs12 -file client.crt
/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.121-0.b13.el7_3.x86_64/jre/bin/keytool -import -file client.crt -keystore client.truststore

#! Step 4 Export client certificate to pkcs12 format
/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.121-0.b13.el7_3.x86_64/jre/bin/keytool -importkeystore -srckeystore client.keystore -destkeystore clientCert.p12 -srcstoretype PKCS12 -deststoretype PKCS12

# move certs to cert dir
mv clientCert.p12 client.crt client.keystore client.truststore server.keystore custom/conf/cert/

#! Step 5 Edit server.xml
vi ~/custom/deploy/jbossweb.sar/server.xml
### add
# server.xml
<!-- SSL/TLS Connector conf using the server.{keystore,truststore} -->
      <Connector port="8443" address="${jboss.bind.address}"
           protocol="HTTP/1.1" SSLEnabled="true"
           maxThreads="100" strategy="ms" maxHttpHeaderSize="8192"
           emptySessionPath="true"
           scheme="https" secure="true" clientAuth="true" 
           keystoreFile="${jboss.server.home.dir}/conf/cert/server.keystore"
           keystorePass="123456"
           truststoreFile="${jboss.server.home.dir}/conf/cert/client.truststore"
           truststorePass="123456"
           sslProtocol = "TLS">	
      </Connector>
# /server.xml

#! Step 6 Copy clientCert.p12 to you client machine and import to your browser

cp ~/custom/conf/cert/clientCert.p12 /vagrant/
### import to your browser

